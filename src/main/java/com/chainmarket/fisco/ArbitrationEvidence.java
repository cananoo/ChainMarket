package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ArbitrationEvidence extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50610e2c806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633862e811146100885780636bbc463c146100cd5780636c08faf71461010e578063833aed0514610139578063995e4339146101a5578063b6f03d9714610340578063d62addaf1461044b575b600080fd5b34801561009457600080fd5b506100b3600480360381019080803590602001909291905050506105e6565b604051808215151515815260200191505060405180910390f35b3480156100d957600080fd5b506100f860048036038101908080359060200190929190505050610612565b6040518082815260200191505060405180910390f35b34801561011a57600080fd5b50610123610635565b6040518082815260200191505060405180910390f35b34801561014557600080fd5b5061014e610642565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610191578082015181840152602081019050610176565b505050509050019250505060405180910390f35b3480156101b157600080fd5b506101d06004803603810190808035906020019092919050505061069a565b60405180806020018060200187151515158152602001806020018681526020018515151515815260200184810384528a818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b8381101561029857808201518184015260208101905061027d565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b838110156102fe5780820151818401526020810190506102e3565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561034c57600080fd5b5061044960048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803515159060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506108d9565b005b34801561045757600080fd5b5061047660048036038101908080359060200190929190505050610b3d565b60405180806020018060200187151515158152602001806020018681526020018515151515815260200184810384528a818151815260200191508051906020019080838360005b838110156104d85780820151818401526020810190506104bd565b50505050905090810190601f1680156105055780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b8381101561053e578082015181840152602081019050610523565b50505050905090810190601f16801561056b5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b838110156105a4578082015181840152602081019050610589565b50505050905090810190601f1680156105d15780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b600080600083815260200190815260200160002060050160009054906101000a900460ff169050919050565b60018181548110151561062157fe5b906000526020600020016000915090505481565b6000600180549050905090565b6060600180548060200260200160405190810160405280929190818152602001828054801561069057602002820191906000526020600020905b81548152602001906001019080831161067c575b5050505050905090565b606080600060606000806000806000898152602001908152602001600020905080600001816001018260020160009054906101000a900460ff168360030184600401548560050160009054906101000a900460ff16858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107845780601f1061075957610100808354040283529160200191610784565b820191906000526020600020905b81548152906001019060200180831161076757829003601f168201915b50505050509550848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b50505050509450828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108bc5780601f10610891576101008083540402835291602001916108bc565b820191906000526020600020905b81548152906001019060200180831161089f57829003601f168201915b505050505092509650965096509650965096505091939550919395565b60008086815260200190815260200160002060050160009054906101000a900460ff16151561092f5760018590806001815401808255809150509060018203906000526020600020016000909192909190915055505b60c0604051908101604052808581526020018481526020018315158152602001828152602001428152602001600115158152506000808781526020019081526020016000206000820151816000019080519060200190610990929190610d5b565b5060208201518160010190805190602001906109ad929190610d5b565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160030190805190602001906109ea929190610d5b565b506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050847f4a4eee6d9b974119f5aefe656fae55f74c05fe1b9aaafbaf437e594f4497adf58585854260405180806020018060200185151515158152602001848152602001838103835287818151815260200191508051906020019080838360005b83811015610a92578082015181840152602081019050610a77565b50505050905090810190601f168015610abf5780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b83811015610af8578082015181840152602081019050610add565b50505050905090810190601f168015610b255780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a25050505050565b6000602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c875780601f10610c5c57610100808354040283529160200191610c87565b820191906000526020600020905b815481529060010190602001808311610c6a57829003601f168201915b5050505050908060020160009054906101000a900460ff1690806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d385780601f10610d0d57610100808354040283529160200191610d38565b820191906000526020600020905b815481529060010190602001808311610d1b57829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff16905086565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d9c57805160ff1916838001178555610dca565b82800160010185558215610dca579182015b82811115610dc9578251825591602001919060010190610dae565b5b509050610dd79190610ddb565b5090565b610dfd91905b80821115610df9576000816000905550600101610de1565b5090565b905600a165627a7a72305820053db75aa798186929886ee4567152e5acc9f5853efe189676c743dc6036a7330029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50610e2c806100206000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634e873f571461008857806362eb2135146100b357806385135960146100f45780638de9d0c914610139578063900fc45514610244578063c1cb256e146103df578063ec0eb1461461057a575b600080fd5b34801561009457600080fd5b5061009d6105e6565b6040518082815260200191505060405180910390f35b3480156100bf57600080fd5b506100de600480360381019080803590602001909291905050506105f3565b6040518082815260200191505060405180910390f35b34801561010057600080fd5b5061011f60048036038101908080359060200190929190505050610616565b604051808215151515815260200191505060405180910390f35b34801561014557600080fd5b5061024260048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803515159060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610642565b005b34801561025057600080fd5b5061026f600480360381019080803590602001909291905050506108a6565b60405180806020018060200187151515158152602001806020018681526020018515151515815260200184810384528a818151815260200191508051906020019080838360005b838110156102d15780820151818401526020810190506102b6565b50505050905090810190601f1680156102fe5780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b8381101561033757808201518184015260208101905061031c565b50505050905090810190601f1680156103645780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b8381101561039d578082015181840152602081019050610382565b50505050905090810190601f1680156103ca5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156103eb57600080fd5b5061040a60048036038101908080359060200190929190505050610ae5565b60405180806020018060200187151515158152602001806020018681526020018515151515815260200184810384528a818151815260200191508051906020019080838360005b8381101561046c578082015181840152602081019050610451565b50505050905090810190601f1680156104995780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b838110156104d25780820151818401526020810190506104b7565b50505050905090810190601f1680156104ff5780820380516001836020036101000a031916815260200191505b50848103825287818151815260200191508051906020019080838360005b8381101561053857808201518184015260208101905061051d565b50505050905090810190601f1680156105655780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561058657600080fd5b5061058f610d03565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105d25780820151818401526020810190506105b7565b505050509050019250505060405180910390f35b6000600180549050905090565b60018181548110151561060257fe5b906000526020600020016000915090505481565b600080600083815260200190815260200160002060050160009054906101000a900460ff169050919050565b60008086815260200190815260200160002060050160009054906101000a900460ff1615156106985760018590806001815401808255809150509060018203906000526020600020016000909192909190915055505b60c06040519081016040528085815260200184815260200183151581526020018281526020014281526020016001151581525060008087815260200190815260200160002060008201518160000190805190602001906106f9929190610d5b565b506020820151816001019080519060200190610716929190610d5b565b5060408201518160020160006101000a81548160ff0219169083151502179055506060820151816003019080519060200190610753929190610d5b565b506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050847f33a40ff7626c66a248c4daf48c63298e965f3f3ecf3ed1a4cba1495a78631ae28585854260405180806020018060200185151515158152602001848152602001838103835287818151815260200191508051906020019080838360005b838110156107fb5780820151818401526020810190506107e0565b50505050905090810190601f1680156108285780820380516001836020036101000a031916815260200191505b50838103825286818151815260200191508051906020019080838360005b83811015610861578082015181840152602081019050610846565b50505050905090810190601f16801561088e5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a25050505050565b606080600060606000806000806000898152602001908152602001600020905080600001816001018260020160009054906101000a900460ff168360030184600401548560050160009054906101000a900460ff16858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109905780601f1061096557610100808354040283529160200191610990565b820191906000526020600020905b81548152906001019060200180831161097357829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a2c5780601f10610a0157610100808354040283529160200191610a2c565b820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b50505050509450828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ac85780601f10610a9d57610100808354040283529160200191610ac8565b820191906000526020600020905b815481529060010190602001808311610aab57829003601f168201915b505050505092509650965096509650965096505091939550919395565b6000602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b915780601f10610b6657610100808354040283529160200191610b91565b820191906000526020600020905b815481529060010190602001808311610b7457829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c2f5780601f10610c0457610100808354040283529160200191610c2f565b820191906000526020600020905b815481529060010190602001808311610c1257829003601f168201915b5050505050908060020160009054906101000a900460ff1690806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce05780601f10610cb557610100808354040283529160200191610ce0565b820191906000526020600020905b815481529060010190602001808311610cc357829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff16905086565b60606001805480602002602001604051908101604052809291908181526020018280548015610d5157602002820191906000526020600020905b815481526020019060010190808311610d3d575b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d9c57805160ff1916838001178555610dca565b82800160010185558215610dca579182015b82811115610dc9578251825591602001919060010190610dae565b5b509050610dd79190610ddb565b5090565b610dfd91905b80821115610df9576000816000905550600101610de1565b5090565b905600a165627a7a723058206082dcc687f36b811ad3799023248633a395487e4228a005f5825d59fe096d0b0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"caseId\",\"type\":\"uint256\"}],\"name\":\"resultExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCaseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCaseIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"caseId\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"caseId\",\"type\":\"uint256\"},{\"name\":\"caseNo\",\"type\":\"string\"},{\"name\":\"voteRatio\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"bool\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"recordResult\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbitrationResults\",\"outputs\":[{\"name\":\"caseNo\",\"type\":\"string\"},{\"name\":\"voteRatio\",\"type\":\"string\"},{\"name\":\"result\",\"type\":\"bool\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caseId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"caseNo\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"voteRatio\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ResultRecorded\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESULTEXISTS = "resultExists";

    public static final String FUNC_CASEIDS = "caseIds";

    public static final String FUNC_GETCASECOUNT = "getCaseCount";

    public static final String FUNC_GETALLCASEIDS = "getAllCaseIds";

    public static final String FUNC_GETRESULT = "getResult";

    public static final String FUNC_RECORDRESULT = "recordResult";

    public static final String FUNC_ARBITRATIONRESULTS = "arbitrationResults";

    public static final Event RESULTRECORDED_EVENT = new Event("ResultRecorded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
    ;

    protected ArbitrationEvidence(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Boolean resultExists(BigInteger caseId) throws ContractException {
        final Function function = new Function(FUNC_RESULTEXISTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger caseIds(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_CASEIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCaseCount() throws ContractException {
        final Function function = new Function(FUNC_GETCASECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getAllCaseIds() throws ContractException {
        final Function function = new Function(FUNC_GETALLCASEIDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple6<String, String, Boolean, String, BigInteger, Boolean> getResult(BigInteger caseId) throws ContractException {
        final Function function = new Function(FUNC_GETRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, Boolean, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (Boolean) results.get(5).getValue());
    }

    public TransactionReceipt recordResult(BigInteger caseId, String caseNo, String voteRatio, Boolean result, String description) {
        final Function function = new Function(
                FUNC_RECORDRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(caseId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(caseNo), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(voteRatio), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] recordResult(BigInteger caseId, String caseNo, String voteRatio, Boolean result, String description, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RECORDRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(caseId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(caseNo), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(voteRatio), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRecordResult(BigInteger caseId, String caseNo, String voteRatio, Boolean result, String description) {
        final Function function = new Function(
                FUNC_RECORDRESULT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(caseId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(caseNo), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(voteRatio), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(result), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(description)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, Boolean, String> getRecordResultInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RECORDRESULT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple6<String, String, Boolean, String, BigInteger, Boolean> arbitrationResults(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_ARBITRATIONRESULTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, Boolean, String, BigInteger, Boolean>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (Boolean) results.get(5).getValue());
    }

    public List<ResultRecordedEventResponse> getResultRecordedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESULTRECORDED_EVENT, transactionReceipt);
        ArrayList<ResultRecordedEventResponse> responses = new ArrayList<ResultRecordedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResultRecordedEventResponse typedResponse = new ResultRecordedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.caseId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.caseNo = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.voteRatio = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.result = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeResultRecordedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RESULTRECORDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeResultRecordedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RESULTRECORDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ArbitrationEvidence load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ArbitrationEvidence(contractAddress, client, credential);
    }

    public static ArbitrationEvidence deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ArbitrationEvidence.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class ResultRecordedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger caseId;

        public String caseNo;

        public String voteRatio;

        public Boolean result;

        public BigInteger timestamp;
    }
}
